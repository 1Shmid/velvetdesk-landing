// app/api/waitlist/route.ts
import { NextRequest, NextResponse } from 'next/server'
import { supabase } from '@/lib/supabase'
import { sendVerificationEmail } from '@/lib/email'
import { isValidPhoneNumber, parsePhoneNumber } from 'libphonenumber-js'
import crypto from 'crypto'
import { waitlistSchema } from '@/lib/validations/waitlist'

export async function POST(request: NextRequest) {
  try {
    const data = await request.json()
    
    console.log('üì• Received data:', data)
    
    // ‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø —á–µ—Ä–µ–∑ Zod
    try {
      const validated = waitlistSchema.parse(data)
      
      // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω "Other" –∏ –µ—Å—Ç—å custom_operator, –∑–∞–º–µ–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
      if (validated.custom_operator && validated.custom_operator.trim() !== '') {
        validated.telecom_operator = validated.custom_operator.trim()
      }
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω—ã –≤ E.164
      const contactPhoneNumber = parsePhoneNumber(validated.contact_phone)
      const businessPhoneNumber = parsePhoneNumber(validated.business_phone)
      
      validated.contact_phone = contactPhoneNumber!.format('E.164')
      validated.business_phone = businessPhoneNumber!.format('E.164')
      
      // –û–±–Ω–æ–≤–ª—è–µ–º data
      Object.assign(data, validated)
      
      console.log('‚úÖ All validations passed via Zod')
      
    } catch (error: any) {
      console.log('‚ùå Validation error:', error.errors)
      return NextResponse.json(
        { success: false, error: error.errors[0]?.message || 'Validation failed' },
        { status: 400 }
      )
    }
    
    console.log('‚úÖ All validations passed, checking for duplicates...')
    
    // ‚úÖ –ü–†–û–í–ï–†–ö–ê –ù–ê –î–£–ë–õ–ò–ö–ê–¢–´
    const { data: existingEntry } = await supabase
      .from('waitlist')
      .select('id')
      .eq('email', data.email)
      .single()
    
    if (existingEntry) {
      return NextResponse.json(
        { success: false, error: 'Email already registered' },
        { status: 409 }
      )
    }
    
    console.log('‚úÖ No duplicates found, inserting to DB...')
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ email
    const verification_token = crypto.randomBytes(32).toString('hex')
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î


    // ‚úÖ DEBUG: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ë–î
      console.log('üì§ Data before insert:', {
        contact_phone: data.contact_phone,
        business_phone: data.business_phone,
        telecom_operator: data.telecom_operator
      });

    const { data: waitlistEntry, error: dbError } = await supabase
      .from('waitlist')
      .insert([{
        business_name: data.business_name,
        contact_name: data.contact_name,
        email: data.email,
        contact_phone: data.contact_phone,
        business_phone: data.business_phone,        // NEW
        telecom_operator: data.telecom_operator,    // NEW
        business_type: data.business_type,
        website: data.website,
        message: data.message || null,
        country: data.country || 'ES',
        language: data.language || 'en',
        user_agent: data.user_agent || null,
        referrer: data.referrer || null,
        verification_token,
        status: 'pending',
        email_verified: false,
      }])
      .select()
      .single()
    
    if (dbError) {
      console.error('‚ùå DB Error:', dbError)
      throw dbError
    }
    
    console.log('‚úÖ Entry created:', waitlistEntry.id)
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email –∫–ª–∏–µ–Ω—Ç—É
    await sendVerificationEmail({
      email: data.email,
      contact_name: data.contact_name,
      business_name: data.business_name,
      verification_token
    })
    
    console.log('‚úÖ Verification email sent')
    
    return NextResponse.json({ 
      success: true, 
      message: 'Waitlist entry created. Please check your email.' 
    })
    
  } catch (error) {
    console.error('Waitlist API error:', error)
    return NextResponse.json(
      { success: false, error: 'Failed to process waitlist submission' },
      { status: 500 }
    )
  }
}